from androguard.core.bytecodes.apk import APK
import sys
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# from sklearn.model_selection import train_test_split
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.metrics import accuracy_score
from keras.models import Sequential
from keras.layers import Dense
import numpy

numpy.random.seed(7)

applicationLocation = 'application/'
permissions = APK(applicationLocation+"/Swiggy.apk").get_permissions()
permissions = [permission for permission in permissions if "android" in permission]
df = pd.read_csv("final_data.csv")
features = list(df.columns[0:10].values)
APKfeatures = list(set(features).intersection(permissions))
APKValues=[]
for feature in features:
    if feature in APKfeatures:
        APKValues.append(1)
    else:
        APKValues.append(0)
X = df.drop(['substring','getMemoryInfo','sendTextMessage','getSubscriberId','getLine1Number','loadClass','obtainMessage','getDocumentElement','db','class'],axis=1)
Y = df['class']

#Random Forest
# train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.25, random_state=0)
# parameters = {'bootstrap': True,
#               'min_samples_leaf': 3,
#               'n_estimators': 50, 
#               'min_samples_split': 10,
#               'max_features': 'sqrt',
#               'max_depth': 6,
#               'max_leaf_nodes': None}
# RF_model = RandomForestClassifier(**parameters)
# RF_model.fit(train_X, train_y)
# RF_predictions = RF_model.predict(test_X)
# # print(accuracy_score(test_y ,RF_predictions))


#DenseNet
model = Sequential()
model.add(Dense(12, input_dim=10, activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
# Compile model
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
# Fit the model
model.fit(X, Y, epochs=150, batch_size=10)
# evaluate the model
scores = model.evaluate(X, Y)
print("\n%s: %.2f%%" % (model.metrics_names[1], scores[1]*100))
classifyDF = pd.DataFrame(columns=features)
classifyDF = classifyDF.append(pd.Series(APKValues,index=features), ignore_index=True)
predictions = model.predict(classifyDF)
print(predictions[0][0])